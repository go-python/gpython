// Code generated by goyacc -v y.output grammar.y. DO NOT EDIT.

//line grammar.y:6

package parser

import __yyfmt__ "fmt"

//line grammar.y:7

// Grammar for Python

import (
	"fmt"
	"github.com/go-python/gpython/ast"
	"github.com/go-python/gpython/py"
)

// NB can put code blocks in not just at the end

// Returns a Tuple if > 1 items or a trailing comma, otherwise returns
// the first item in elts
func tupleOrExpr(pos ast.Pos, elts []ast.Expr, optional_comma bool) ast.Expr {
	if optional_comma || len(elts) > 1 {
		return &ast.Tuple{ExprBase: ast.ExprBase{Pos: pos}, Elts: elts, Ctx: ast.Load}
	} else {
		return elts[0]
	}
}

// Apply trailers (if any) to expr
//
// trailers are half made Call, Subscript or Attribute
func applyTrailers(expr ast.Expr, trailers []ast.Expr) ast.Expr {
	//trailers := $1
	for _, trailer := range trailers {
		switch x := trailer.(type) {
		case *ast.Call:
			x.Func, expr = expr, x
		case *ast.Subscript:
			x.Value, expr = expr, x
		case *ast.Attribute:
			x.Value, expr = expr, x
		default:
			panic(fmt.Sprintf("Unknown trailer type: %T", expr))
		}
	}
	return expr
}

// Set the context for expr
func setCtx(yylex yyLexer, expr ast.Expr, ctx ast.ExprContext) {
	setctxer, ok := expr.(ast.SetCtxer)
	if !ok {
		expr_name := ""
		switch expr := expr.(type) {
		case *ast.Lambda:
			expr_name = "lambda"
		case *ast.Call:
			expr_name = "function call"
		case *ast.BoolOp, *ast.BinOp, *ast.UnaryOp:
			expr_name = "operator"
		case *ast.GeneratorExp:
			expr_name = "generator expression"
		case *ast.Yield, *ast.YieldFrom:
			expr_name = "yield expression"
		case *ast.ListComp:
			expr_name = "list comprehension"
		case *ast.SetComp:
			expr_name = "set comprehension"
		case *ast.DictComp:
			expr_name = "dict comprehension"
		case *ast.Dict:
			expr_name = "dict display"
		case *ast.Set:
			expr_name = "set display"
		case *ast.Constant:
			expr_name = fmt.Sprint(expr.Value)
		case *ast.Ellipsis:
			expr_name = "Ellipsis"
		case *ast.Compare:
			expr_name = "comparison"
		case *ast.IfExp:
			expr_name = "conditional expression"
		default:
			expr_name = fmt.Sprintf("unexpected %T", expr)
		}
		action := "assign to"
		if ctx == ast.Del {
			action = "delete"
		}
		yylex.(*yyLex).SyntaxErrorf("cannot %s %s", action, expr_name)
		return
	}
	setctxer.SetCtx(ctx)
}

// Set the context for all the items in exprs
func setCtxs(yylex yyLexer, exprs []ast.Expr, ctx ast.ExprContext) {
	for i := range exprs {
		setCtx(yylex, exprs[i], ctx)
	}
}

//line grammar.y:105
type yySymType struct {
	yys            int
	pos            ast.Pos // kept up to date by the lexer
	str            string
	obj            py.Object
	mod            ast.Mod
	stmt           ast.Stmt
	stmts          []ast.Stmt
	expr           ast.Expr
	exprs          []ast.Expr
	op             ast.OperatorNumber
	cmpop          ast.CmpOp
	comma          bool
	comprehensions []ast.Comprehension
	isExpr         bool
	slice          ast.Slicer
	call           *ast.Call
	level          int
	alias          *ast.Alias
	aliases        []*ast.Alias
	identifiers    []ast.Identifier
	ifstmt         *ast.If
	lastif         *ast.If
	exchandlers    []*ast.ExceptHandler
	withitem       *ast.WithItem
	withitems      []*ast.WithItem
	arg            *ast.Arg
	args           []*ast.Arg
	arguments      *ast.Arguments
}

const NEWLINE = 57346
const ENDMARKER = 57347
const NAME = 57348
const INDENT = 57349
const DEDENT = 57350
const STRING = 57351
const NUMBER = 57352
const PLINGEQ = 57353
const PERCEQ = 57354
const ANDEQ = 57355
const STARSTAR = 57356
const STARSTAREQ = 57357
const STAREQ = 57358
const PLUSEQ = 57359
const MINUSEQ = 57360
const ATEQ = 57361
const MINUSGT = 57362
const ELIPSIS = 57363
const DIVDIV = 57364
const DIVDIVEQ = 57365
const DIVEQ = 57366
const LTLT = 57367
const LTLTEQ = 57368
const LTEQ = 57369
const LTGT = 57370
const EQEQ = 57371
const GTEQ = 57372
const GTGT = 57373
const GTGTEQ = 57374
const HATEQ = 57375
const PIPEEQ = 57376
const ASSIGN_EQ = 57377
const FALSE = 57378
const NONE = 57379
const TRUE = 57380
const AND = 57381
const AS = 57382
const ASSERT = 57383
const ASYNC = 57384
const AWAIT = 57385
const BREAK = 57386
const CLASS = 57387
const CONTINUE = 57388
const DEF = 57389
const DEL = 57390
const ELIF = 57391
const ELSE = 57392
const EXCEPT = 57393
const FINALLY = 57394
const FOR = 57395
const FROM = 57396
const GLOBAL = 57397
const IF = 57398
const IMPORT = 57399
const IN = 57400
const IS = 57401
const LAMBDA = 57402
const NONLOCAL = 57403
const NOT = 57404
const OR = 57405
const PASS = 57406
const RAISE = 57407
const RETURN = 57408
const TRY = 57409
const WHILE = 57410
const WITH = 57411
const YIELD = 57412
const SINGLE_INPUT = 57413
const FILE_INPUT = 57414
const EVAL_INPUT = 57415

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NEWLINE",
	"ENDMARKER",
	"NAME",
	"INDENT",
	"DEDENT",
	"STRING",
	"NUMBER",
	"PLINGEQ",
	"PERCEQ",
	"ANDEQ",
	"STARSTAR",
	"STARSTAREQ",
	"STAREQ",
	"PLUSEQ",
	"MINUSEQ",
	"ATEQ",
	"MINUSGT",
	"ELIPSIS",
	"DIVDIV",
	"DIVDIVEQ",
	"DIVEQ",
	"LTLT",
	"LTLTEQ",
	"LTEQ",
	"LTGT",
	"EQEQ",
	"GTEQ",
	"GTGT",
	"GTGTEQ",
	"HATEQ",
	"PIPEEQ",
	"ASSIGN_EQ",
	"FALSE",
	"NONE",
	"TRUE",
	"AND",
	"AS",
	"ASSERT",
	"ASYNC",
	"AWAIT",
	"BREAK",
	"CLASS",
	"CONTINUE",
	"DEF",
	"DEL",
	"ELIF",
	"ELSE",
	"EXCEPT",
	"FINALLY",
	"FOR",
	"FROM",
	"GLOBAL",
	"IF",
	"IMPORT",
	"IN",
	"IS",
	"LAMBDA",
	"NONLOCAL",
	"NOT",
	"OR",
	"PASS",
	"RAISE",
	"RETURN",
	"TRY",
	"WHILE",
	"WITH",
	"YIELD",
	"SINGLE_INPUT",
	"FILE_INPUT",
	"EVAL_INPUT",
	"'('",
	"')'",
	"'@'",
	"':'",
	"'='",
	"','",
	"'*'",
	"'/'",
	"';'",
	"'.'",
	"'<'",
	"'>'",
	"'|'",
	"'^'",
	"'&'",
	"'+'",
	"'-'",
	"'%'",
	"'~'",
	"'['",
	"']'",
	"'{'",
	"'}'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1546

var yyAct = [...]int{

	283, 64, 514, 248, 344, 501, 345, 346, 174, 180,
	385, 342, 343, 178, 179, 400, 353, 176, 177, 62,
	369, 442, 370, 249, 102, 60, 6, 234, 57, 63,
	227, 38, 263, 216, 110, 100, 351, 160, 502, 108,
	108, 77, 112, 118, 74, 78, 117, 212, 73, 67,
	165, 114, 256, 156, 18, 75, 317, 14, 69, 161,
	438, 72, 305, 395, 394, 201, 202, 52, 198, 114,
	152, 307, 76, 217, 148, 102, 158, 197, 196, 257,
	207, 306, 84, 113, 125, 154, 127, 273, 269, 269,
	104, 157, 252, 169, 251, 349, 381, 183, 520, 510,
	167, 113, 239, 348, 497, 182, 108, 108, 226, 371,
	492, 153, 247, 475, 229, 215, 219, 219, 430, 163,
	464, 221, 235, 439, 349, 208, 209, 210, 172, 184,
	269, 433, 348, 107, 204, 183, 96, 90, 203, 205,
	422, 412, 378, 182, 155, 318, 314, 282, 92, 206,
	272, 102, 267, 262, 266, 246, 228, 238, 414, 240,
	259, 222, 166, 95, 93, 94, 358, 260, 213, 347,
	85, 181, 278, 284, 261, 528, 264, 368, 519, 265,
	257, 270, 505, 367, 127, 444, 454, 68, 277, 70,
	453, 286, 287, 424, 452, 496, 450, 61, 347, 461,
	312, 86, 214, 446, 255, 441, 268, 66, 418, 181,
	376, 311, 409, 402, 350, 275, 79, 80, 313, 81,
	87, 279, 88, 316, 276, 126, 319, 320, 25, 322,
	24, 281, 280, 244, 242, 171, 425, 115, 437, 420,
	411, 392, 292, 296, 297, 291, 328, 288, 330, 298,
	299, 300, 301, 302, 293, 310, 336, 303, 327, 51,
	315, 308, 389, 329, 309, 102, 321, 170, 323, 372,
	290, 118, 294, 295, 171, 445, 114, 355, 2, 3,
	4, 331, 171, 354, 289, 245, 379, 360, 380, 332,
	264, 363, 324, 265, 357, 312, 374, 375, 335, 24,
	312, 373, 274, 271, 377, 21, 311, 312, 113, 504,
	364, 311, 506, 401, 504, 337, 171, 491, 311, 448,
	401, 23, 404, 406, 405, 355, 386, 24, 149, 431,
	253, 354, 173, 243, 108, 13, 11, 339, 396, 199,
	398, 114, 382, 413, 219, 200, 390, 37, 393, 397,
	192, 391, 15, 421, 419, 416, 417, 27, 235, 410,
	218, 211, 408, 349, 128, 129, 190, 191, 188, 189,
	429, 521, 231, 113, 121, 183, 426, 434, 151, 123,
	106, 109, 334, 498, 124, 440, 349, 264, 183, 428,
	265, 427, 432, 507, 423, 349, 435, 193, 195, 472,
	183, 194, 371, 495, 388, 365, 451, 443, 436, 154,
	362, 359, 150, 458, 120, 449, 463, 459, 465, 460,
	326, 325, 361, 186, 187, 119, 455, 241, 103, 470,
	236, 235, 105, 7, 462, 456, 476, 447, 466, 467,
	237, 254, 355, 175, 468, 469, 477, 483, 354, 341,
	478, 474, 473, 471, 486, 340, 488, 489, 490, 386,
	285, 480, 493, 479, 482, 481, 484, 487, 485, 415,
	116, 333, 399, 366, 159, 162, 494, 164, 499, 138,
	139, 352, 144, 136, 134, 135, 146, 384, 383, 374,
	145, 137, 185, 142, 26, 511, 132, 225, 101, 143,
	141, 140, 500, 512, 509, 508, 515, 111, 513, 518,
	413, 374, 375, 522, 523, 459, 233, 232, 89, 503,
	524, 96, 90, 526, 338, 459, 525, 460, 529, 527,
	515, 530, 403, 92, 224, 258, 71, 516, 65, 83,
	304, 82, 131, 17, 133, 147, 16, 122, 95, 93,
	94, 130, 12, 50, 28, 85, 53, 25, 54, 24,
	39, 9, 10, 47, 46, 21, 59, 48, 19, 58,
	45, 44, 68, 49, 70, 43, 40, 56, 55, 22,
	20, 23, 61, 42, 41, 36, 86, 35, 51, 34,
	33, 89, 66, 457, 96, 90, 32, 31, 30, 29,
	407, 79, 80, 8, 81, 87, 92, 88, 98, 99,
	5, 97, 1, 91, 0, 0, 0, 0, 0, 0,
	0, 95, 93, 94, 0, 0, 50, 28, 85, 53,
	25, 54, 24, 39, 0, 0, 0, 0, 21, 59,
	48, 19, 58, 0, 0, 68, 49, 70, 0, 40,
	56, 55, 22, 20, 23, 61, 0, 0, 0, 86,
	0, 51, 0, 0, 89, 66, 0, 96, 90, 0,
	0, 0, 0, 0, 79, 80, 0, 81, 87, 92,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 93, 94, 0, 0, 50,
	28, 85, 53, 25, 54, 24, 39, 0, 0, 0,
	0, 21, 59, 48, 19, 58, 0, 0, 68, 49,
	70, 0, 40, 56, 55, 22, 20, 23, 61, 0,
	0, 0, 86, 0, 51, 250, 0, 89, 66, 0,
	96, 90, 0, 0, 0, 0, 0, 79, 80, 0,
	81, 87, 92, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 93, 94,
	0, 0, 50, 0, 85, 53, 0, 54, 0, 39,
	0, 0, 0, 0, 0, 59, 48, 0, 58, 0,
	0, 68, 49, 70, 0, 40, 56, 55, 0, 89,
	0, 61, 96, 90, 0, 86, 0, 0, 0, 0,
	0, 66, 0, 89, 92, 0, 96, 90, 0, 0,
	79, 80, 0, 81, 87, 0, 88, 0, 92, 95,
	93, 94, 0, 0, 50, 0, 85, 53, 0, 54,
	0, 39, 0, 95, 93, 94, 0, 59, 48, 0,
	58, 0, 0, 68, 49, 70, 0, 40, 56, 55,
	0, 89, 0, 61, 96, 90, 0, 86, 0, 230,
	0, 0, 0, 66, 0, 0, 92, 0, 0, 0,
	0, 86, 79, 80, 0, 81, 87, 0, 88, 0,
	0, 95, 93, 94, 0, 0, 0, 0, 85, 0,
	87, 89, 88, 0, 96, 90, 0, 0, 0, 356,
	0, 0, 0, 0, 0, 68, 92, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 95, 93, 94, 0, 66, 0, 0, 85, 0,
	0, 0, 0, 0, 79, 80, 0, 81, 87, 89,
	88, 223, 96, 90, 0, 68, 0, 70, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 95,
	93, 94, 0, 0, 79, 80, 85, 81, 87, 107,
	88, 0, 96, 90, 0, 0, 0, 107, 0, 0,
	96, 90, 0, 68, 92, 70, 0, 0, 0, 0,
	0, 0, 92, 61, 0, 0, 0, 86, 0, 95,
	93, 94, 0, 66, 0, 0, 85, 95, 93, 94,
	0, 0, 79, 80, 85, 81, 87, 89, 88, 0,
	96, 90, 0, 68, 0, 70, 0, 0, 0, 0,
	0, 68, 92, 70, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 66, 0, 86, 0, 95, 93, 94,
	0, 66, 79, 80, 85, 81, 87, 220, 88, 0,
	79, 80, 0, 81, 87, 168, 88, 0, 0, 0,
	0, 68, 0, 70, 0, 0, 0, 89, 0, 0,
	96, 90, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 66, 92, 0, 0, 0, 0, 0, 0, 0,
	79, 80, 0, 81, 87, 0, 88, 95, 93, 94,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 89,
	0, 0, 96, 90, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 70, 92, 0, 0, 0, 0, 89,
	0, 0, 96, 90, 0, 86, 0, 230, 444, 95,
	93, 94, 0, 0, 92, 0, 85, 0, 0, 0,
	79, 80, 0, 81, 87, 0, 88, 0, 0, 95,
	93, 94, 0, 68, 0, 70, 85, 0, 0, 89,
	0, 0, 96, 90, 0, 0, 0, 86, 0, 0,
	387, 0, 0, 68, 92, 70, 0, 0, 0, 0,
	0, 0, 79, 80, 0, 81, 87, 86, 88, 95,
	93, 94, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 79, 80, 0, 81, 87, 89, 88, 0,
	96, 90, 0, 68, 0, 70, 0, 0, 0, 0,
	89, 0, 92, 96, 90, 0, 0, 86, 0, 0,
	0, 0, 0, 66, 0, 92, 0, 95, 93, 94,
	0, 0, 79, 80, 85, 81, 87, 0, 88, 0,
	95, 93, 94, 0, 0, 0, 0, 85, 0, 0,
	0, 68, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 517, 86, 70, 0, 0, 0,
	89, 0, 0, 96, 90, 0, 0, 0, 86, 0,
	79, 80, 0, 81, 87, 92, 88, 0, 0, 0,
	0, 0, 0, 79, 80, 0, 81, 87, 0, 88,
	95, 93, 94, 0, 0, 0, 0, 85, 0, 0,
	107, 0, 0, 96, 90, 0, 0, 0, 89, 0,
	0, 96, 90, 0, 68, 92, 70, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 86, 0,
	95, 93, 94, 0, 0, 0, 0, 85, 95, 93,
	94, 0, 0, 79, 80, 85, 81, 87, 89, 88,
	0, 96, 90, 0, 68, 0, 70, 0, 0, 0,
	0, 0, 0, 92, 70, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 95, 93,
	94, 0, 0, 79, 80, 85, 81, 87, 0, 88,
	0, 79, 80, 0, 81, 87, 89, 88, 0, 96,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 66, 0, 0, 0, 95, 93, 94, 0,
	0, 79, 80, 85, 81, 87, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	80, 0, 81, 87, 0, 88,
}
var yyPact = [...]int{

	207, -1000, 658, -1000, 1314, -1000, -1000, 424, 8, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1354,
	1354, 1402, 160, 1314, 419, 408, 183, -1000, 252, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 467, 1402,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 406, 406,
	1314, 403, 65, -1000, -1000, 1314, 1314, -1000, 403, 79,
	-1000, 1031, -1000, -1000, 211, -1000, 1450, 293, 91, -1000,
	1362, 339, -8, -10, -20, 314, -24, 58, -1000, 1450,
	1450, 1450, -1000, 347, -1000, 807, 127, 983, 855, -1000,
	-1000, 363, -1000, -1000, -1000, -1000, -1000, -1000, 512, -1000,
	-1000, 78, -1000, -1000, 793, 423, 157, 298, -1000, 156,
	227, 76, -1000, -8, -1000, 731, 15, -1000, 290, 130,
	106, -1000, -1000, -1000, -1000, -1000, 280, -1000, -1000, -1000,
	-1000, 1241, 96, 1314, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 943, -1000, 75,
	-1000, 75, 73, 5, -1000, 1193, -1000, -1000, 249, 71,
	-1000, 47, 245, 6, 79, -1000, -1000, -1000, 1314, -1000,
	1362, 1362, -8, 1362, 154, -1000, 68, -1000, -1000, -1000,
	95, 382, 382, -1000, -1000, 1450, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 226, 208, 1450, 1450, 1450, 1450,
	1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, -1000, -1000,
	-1000, 1450, -12, -1000, -1000, 189, 265, 67, -1000, -1000,
	-1000, 265, 67, -1000, -40, 66, 150, 265, 65, 265,
	1450, -1000, -1000, -1000, -1000, -1000, -1000, 416, 1314, -1000,
	-1000, -1000, 731, 1314, 731, 1314, 1402, -1000, -1000, -1000,
	375, 1314, 731, 1450, 317, 89, 137, 895, -1000, -1000,
	-1000, 943, 88, -1000, -1000, -1000, 405, 1314, 418, 404,
	-1000, 1314, 403, 399, 103, -1000, 6, -1000, 219, 293,
	-1000, 1314, 129, -1000, 1314, 63, -1000, 17, -8, -1000,
	-1000, -10, -20, 314, -24, -24, 58, 58, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 895, 1133, 398, -12, -1000,
	187, 1402, 265, 166, 991, -30, -31, -1000, 1153, -1000,
	1314, -1000, -1000, -1000, -8, -1000, -1000, -1000, -1000, -1000,
	263, 136, -1000, 272, 658, -1000, -1000, -8, 135, 1314,
	165, -1000, 62, -1000, -1000, -1000, 80, 380, 380, 131,
	731, 164, 61, -1000, -1000, 158, 1314, -1000, 943, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 396, 39,
	-1000, 289, 1314, -1000, -1000, -1000, 52, -1000, 394, -1000,
	-1000, -1000, 163, -34, 44, -1000, 128, 1091, -1000, -1000,
	217, -1000, -1000, -1000, -1000, -1000, 126, -1000, 265, 270,
	-1000, 119, 731, 117, 113, 109, 1314, 585, -1000, 731,
	-1000, -1000, 118, -1000, 1314, 41, -1000, 17, 1314, -1000,
	-1000, -1000, 895, -1000, 1314, 1314, -1000, -1000, 39, -1000,
	396, 393, -1000, 91, -1000, 34, 382, -1000, -1000, 1133,
	-1000, 1091, -1000, 108, 1314, 1362, 1314, -1000, 1314, -1000,
	731, 263, 731, 731, 731, 277, -1000, -1000, -1000, -1000,
	-1000, 31, -1000, -1000, 389, -1000, -1000, -1000, -1000, -1000,
	120, -1000, -1000, -1000, 25, 369, -1000, 17, -1000, -1000,
	108, -1000, -1000, 253, -1000, 105, -1000, -1000, -1000, 260,
	-1000, 387, 89, -1000, 20, 380, -1000, 91, 382, -1000,
	-1000, -1000, -1000, -1000, 1254, 731, 101, -1000, -1000, 19,
	357, -1000, 17, 17, 258, 172, -1000, 91, -1000, 731,
	89, 380, -1000, -1000, -1000, 98, -1000, 17, 1254, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 613, 612, 611, 610, 609, 23, 27, 608, 603,
	600, 3, 15, 430, 54, 599, 598, 597, 596, 590,
	589, 587, 585, 584, 583, 575, 571, 570, 564, 563,
	562, 561, 336, 552, 335, 551, 57, 357, 352, 547,
	546, 543, 542, 42, 61, 29, 30, 48, 44, 55,
	72, 41, 45, 541, 540, 82, 539, 25, 19, 58,
	2, 1, 49, 35, 31, 360, 33, 538, 537, 536,
	535, 28, 32, 534, 21, 532, 524, 347, 34, 519,
	5, 73, 507, 67, 498, 497, 47, 496, 494, 492,
	0, 38, 10, 488, 487, 16, 481, 52, 36, 50,
	477, 59, 475, 328, 37, 22, 474, 20, 473, 472,
	471, 46, 470, 4, 7, 469, 13, 9, 460, 11,
	17, 455, 449, 6, 12, 8, 443, 14, 18, 441,
	440, 432,
}
var yyR1 = [...]int{

	0, 2, 2, 2, 4, 4, 3, 8, 8, 8,
	5, 130, 130, 98, 98, 97, 97, 77, 88, 88,
	37, 39, 39, 39, 40, 76, 76, 36, 129, 121,
	121, 113, 113, 119, 119, 115, 115, 123, 123, 123,
	123, 123, 124, 124, 124, 122, 122, 122, 114, 114,
	116, 116, 120, 120, 118, 118, 127, 127, 127, 127,
	127, 128, 128, 128, 126, 126, 126, 125, 125, 117,
	7, 7, 131, 131, 9, 9, 6, 14, 14, 14,
	14, 14, 14, 14, 14, 15, 15, 15, 15, 70,
	70, 72, 72, 87, 87, 83, 83, 57, 57, 90,
	90, 64, 35, 35, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 16, 17, 18,
	18, 18, 18, 18, 23, 24, 25, 25, 27, 26,
	26, 26, 19, 19, 28, 99, 99, 100, 100, 102,
	102, 102, 108, 108, 108, 29, 105, 105, 104, 104,
	107, 107, 106, 106, 101, 101, 103, 103, 20, 21,
	84, 84, 22, 22, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 41, 41, 41, 109, 109, 12, 12,
	31, 30, 32, 110, 110, 33, 33, 33, 33, 112,
	112, 34, 111, 111, 75, 75, 75, 10, 10, 11,
	11, 65, 65, 58, 58, 58, 60, 60, 67, 68,
	61, 61, 62, 62, 59, 59, 69, 69, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 45,
	46, 44, 44, 47, 47, 48, 48, 49, 49, 49,
	50, 50, 50, 51, 51, 51, 51, 51, 51, 52,
	52, 52, 52, 53, 53, 56, 56, 86, 86, 1,
	1, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 66, 66, 81,
	81, 54, 54, 54, 94, 94, 93, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 74, 74, 43, 43,
	82, 82, 78, 63, 85, 85, 85, 85, 73, 73,
	73, 73, 73, 38, 96, 96, 95, 95, 95, 95,
	95, 80, 80, 91, 91, 91, 79, 79, 71, 71,
	71,
}
var yyR2 = [...]int{

	0, 2, 2, 2, 1, 2, 2, 0, 2, 2,
	3, 0, 2, 0, 2, 0, 3, 4, 1, 2,
	2, 1, 1, 1, 2, 0, 2, 6, 3, 0,
	1, 1, 3, 1, 3, 0, 1, 3, 5, 8,
	6, 3, 3, 1, 2, 5, 4, 1, 1, 3,
	1, 3, 1, 3, 0, 1, 5, 8, 6, 3,
	3, 2, 3, 1, 5, 4, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 1, 1,
	1, 1, 1, 2, 3, 1, 3, 1, 1, 0,
	1, 2, 4, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	2, 4, 1, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 1, 4, 2, 4, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 2, 2,
	1, 3, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 5, 0, 3,
	6, 5, 7, 0, 4, 4, 7, 7, 10, 1,
	3, 4, 1, 3, 1, 2, 4, 1, 2, 1,
	4, 3, 1, 1, 5, 1, 1, 1, 4, 4,
	1, 3, 1, 3, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	2, 1, 3, 1, 3, 1, 3, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 2,
	2, 2, 1, 1, 3, 2, 3, 0, 2, 1,
	2, 2, 3, 4, 4, 2, 4, 4, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 2, 1, 3, 2, 1, 1, 2,
	2, 3, 2, 3, 3, 4, 1, 2, 1, 1,
	1, 3, 2, 2, 3, 1, 5, 3, 2, 4,
	2, 2, 2, 5, 1, 3, 1, 2, 3, 3,
	2, 1, 1, 4, 5, 2, 2, 3, 1, 3,
	2,
}
var yyChk = [...]int{

	-1000, -2, 71, 72, 73, -4, -6, -13, -9, -31,
	-30, -32, -33, -34, -36, -38, -40, -41, -14, 56,
	68, 53, 67, 69, 47, 45, -88, -37, 42, -15,
	-16, -17, -18, -19, -20, -21, -22, -77, -64, 48,
	64, -23, -24, -25, -26, -27, -28, -29, 55, 61,
	41, 76, -83, 44, 46, 66, 65, -71, 57, 54,
	-57, 70, -58, -45, -61, -67, 80, -62, 60, -59,
	62, -69, -44, -47, -48, -49, -50, -51, -52, 89,
	90, 92, -53, -56, -55, 43, 74, 93, 95, 6,
	10, -1, 21, 37, 38, 36, 9, -3, -8, -5,
	-63, -84, -58, 4, 82, -131, -65, 6, -58, -65,
	-78, -82, -43, -44, -45, 77, -112, -111, -58, 6,
	6, -77, -39, -38, -37, -36, 42, -36, -34, -32,
	-35, -42, -87, 77, 17, 18, 16, 24, 12, 13,
	34, 33, 26, 32, 15, 23, 19, 78, -78, -103,
	6, -103, -58, -101, 6, 79, -90, -63, -58, -106,
	-104, -101, -102, -101, -100, -99, 83, 21, 54, -64,
	56, 63, -44, 39, -125, -126, -120, -128, -116, -127,
	-117, 80, 14, 6, -59, -89, 84, 85, 29, 30,
	27, 28, 11, 58, 62, 59, 86, 87, 88, 25,
	31, 89, 90, 80, 76, 81, 91, 22, -52, -52,
	-52, 14, -86, -55, 75, -71, -66, -81, -65, -45,
	94, -66, -81, 96, -73, -85, -58, -46, -83, -57,
	14, 9, 5, 4, -7, -6, -13, -130, 79, -90,
	-14, 4, 77, 35, 77, 58, 79, -90, -11, -6,
	4, 79, 77, 40, -129, 74, -97, 74, -70, -71,
	-63, 78, -58, -72, -71, -64, 79, 79, -97, 83,
	-57, 54, 79, 40, 57, -99, -101, -58, -61, -62,
	-59, 77, 79, -90, 78, -118, -117, -117, -44, 58,
	62, -47, -48, -49, -50, -50, -51, -51, -52, -52,
	-52, -52, -52, -52, -54, 74, 93, 83, -86, 75,
	-91, 53, 42, -90, 79, -91, -90, 96, 79, -90,
	77, -91, -90, -91, -44, 5, 4, -58, -11, -58,
	-11, -63, -43, -110, 7, -111, -11, -44, -76, 20,
	-121, -122, -119, -124, -113, -123, -114, 80, 14, 6,
	77, -98, -96, -95, -57, -58, 14, -72, 78, 6,
	-58, 4, 6, -58, -104, 6, -108, 80, 74, -107,
	-105, 6, 50, -58, -116, -127, 81, -58, 79, -90,
	-90, 79, -98, -93, -94, -92, -58, 77, 6, 75,
	-78, -91, 75, -66, 94, 94, -58, -46, -58, -109,
	-12, 50, 77, -75, 50, 52, 51, -10, -7, 77,
	-58, 75, 79, -90, 78, -115, -114, -114, 77, -11,
	75, -90, 79, -91, 35, 78, -58, -72, -107, -90,
	79, 40, -58, 79, -90, -120, 14, 75, 94, 79,
	-90, 77, -74, -58, 77, 58, 77, -91, 49, -12,
	77, -11, 77, 77, 77, -58, -7, 8, -11, -113,
	-123, 81, -58, -90, 79, -90, -58, -95, -58, -58,
	-90, -105, 6, -128, -120, 79, -90, -117, -92, -74,
	-58, -74, -58, -61, -58, -58, -11, -12, -11, -11,
	-11, 40, 79, -90, -119, 14, 75, 79, 14, -90,
	-74, -80, -91, -79, 56, 77, 52, 6, -124, -119,
	79, -90, -114, -117, -60, -61, -68, 60, -11, 77,
	79, 14, -90, -90, -80, -125, -11, -114, 77, -90,
	-60,
}
var yyDef = [...]int{

	0, -2, 0, 7, 0, 1, 4, 0, 72, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 77,
	78, 79, 80, 81, 82, 83, 84, 18, 88, 0,
	118, 119, 120, 121, 122, 123, 132, 133, 0, 0,
	0, 0, 99, 124, 125, 126, 129, 128, 0, 0,
	95, 328, 97, 98, 203, 205, 0, 210, 67, 212,
	0, 215, 216, 231, 233, 235, 237, 240, 243, 0,
	0, 0, 252, 253, 257, 0, 0, 0, 0, 270,
	271, 272, 273, 274, 275, 276, 259, 2, 0, 3,
	11, 99, 160, 5, 73, 0, 0, 270, 202, 0,
	0, 99, 300, 298, 299, 0, 0, 189, 192, 0,
	15, 19, 24, 21, 22, 23, 0, 20, 174, 175,
	85, 0, 87, 0, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 0, 117, 158,
	156, 159, 162, 15, 154, 100, 101, 127, 130, 134,
	152, 148, 0, 139, 141, 137, 135, 136, 0, 330,
	0, 0, 229, 0, 0, 68, 99, 66, 52, 63,
	50, 54, 0, 69, 214, 0, 218, 219, 220, 221,
	222, 223, 224, 225, 0, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 0, 255, 257, 261, 0, 279, 99, 277, 278,
	265, 279, 99, 268, 0, 99, 97, 305, 99, 95,
	0, 260, 6, 8, 9, 70, 71, 0, 100, 303,
	75, 76, 0, 0, 0, 0, 100, 302, 183, 199,
	0, 0, 0, 0, 25, 29, 0, 13, 86, 89,
	90, 0, 103, 93, 91, 92, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 138, 140, 329, 0, 211,
	213, 0, 100, 61, 0, 99, 55, 99, 217, 226,
	228, 232, 234, 236, 238, 239, 241, 242, 244, 245,
	246, 247, 248, 254, 258, 13, 0, 0, 256, 262,
	0, 0, 0, 0, 100, 0, 0, 269, 100, 308,
	0, 310, 311, 312, 230, 10, 12, 161, 176, 201,
	178, 0, 301, 185, 0, 190, 191, 193, 0, 0,
	0, 30, 99, 47, 33, 43, 31, 35, 0, 48,
	0, 0, 99, 314, 316, 97, 0, 94, 0, 157,
	163, 17, 155, 131, 153, 149, 145, 142, 0, 99,
	150, 146, 0, 208, 53, 62, 99, 51, 100, 59,
	60, 100, 0, 0, 99, 284, 287, 288, 283, 263,
	0, 325, 264, 280, 266, 267, 0, 307, 304, 178,
	181, 0, 0, 0, 0, 0, 194, 0, 197, 0,
	26, 28, 100, 44, 0, 99, 36, 99, 0, 313,
	16, 14, 100, 317, 0, 0, 320, 102, 99, 144,
	100, 0, 204, 100, 65, 99, 0, 281, 282, 100,
	286, 292, 289, 290, 296, 0, 0, 309, 0, 180,
	0, 178, 0, 0, 0, 195, 198, 200, 27, 34,
	42, 99, 32, 37, 100, 41, 49, 315, 318, 319,
	0, 151, 147, 64, 99, 100, 56, 99, 285, 293,
	294, 291, 297, 323, 306, 0, 179, 182, 184, 186,
	187, 0, 100, 46, 99, 0, 143, 100, 0, 58,
	295, 324, 321, 322, 0, 0, 0, 196, 45, 99,
	100, 38, 99, 99, 326, 206, 207, 67, 177, 0,
	100, 0, 40, 57, 327, 0, 188, 99, 0, 39,
	209,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 91, 88, 3,
	74, 75, 80, 89, 79, 90, 83, 81, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 77, 82,
	84, 78, 85, 3, 76, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 93, 3, 94, 87, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 95, 86, 96, 92,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:267
		{
			yylex.(*yyLex).mod = yyDollar[2].mod
			return 0
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:272
		{
			yylex.(*yyLex).mod = yyDollar[2].mod
			return 0
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:277
		{
			yylex.(*yyLex).mod = yyDollar[2].mod
			return 0
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:291
		{
			yyVAL.mod = &ast.Interactive{ModBase: ast.ModBase{Pos: yyVAL.pos}, Body: yyDollar[1].stmts}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:295
		{
			//  NB: compound_stmt in single_input is followed by extra NEWLINE!
			yyVAL.mod = &ast.Interactive{ModBase: ast.ModBase{Pos: yyVAL.pos}, Body: []ast.Stmt{yyDollar[1].stmt}}
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:303
		{
			yyVAL.mod = &ast.Module{ModBase: ast.ModBase{Pos: yyVAL.pos}, Body: yyDollar[1].stmts}
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:309
		{
			yyVAL.stmts = nil
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:313
		{
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:316
		{
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[2].stmts...)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:323
		{
			yyVAL.mod = &ast.Expression{ModBase: ast.ModBase{Pos: yyVAL.pos}, Body: yyDollar[1].expr}
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:332
		{
			yyVAL.call = &ast.Call{ExprBase: ast.ExprBase{Pos: yyVAL.pos}}
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:336
		{
			yyVAL.call = yyDollar[1].call
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:341
		{
			yyVAL.call = nil
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:345
		{
			yyVAL.call = yyDollar[2].call
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:351
		{
			fn := &ast.Name{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Id: ast.Identifier(yyDollar[2].str), Ctx: ast.Load}
			if yyDollar[3].call == nil {
				yyVAL.expr = fn
			} else {
				call := *yyDollar[3].call
				call.Func = fn
				yyVAL.expr = &call
			}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:364
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:369
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[2].expr)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:375
		{
			yyVAL.stmt = &ast.AsyncFunctionDef{FunctionDef: *yyDollar[2].stmt.(*ast.FunctionDef)}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:381
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:385
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:389
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:395
		{
			switch x := (yyDollar[2].stmt).(type) {
			case *ast.ClassDef:
				x.DecoratorList = yyDollar[1].exprs
				yyVAL.stmt = x
			case *ast.FunctionDef:
				x.DecoratorList = yyDollar[1].exprs
				yyVAL.stmt = x
			default:
				panic("bad type for decorated")
			}
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:409
		{
			yyVAL.expr = nil
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:413
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:419
		{
			yyVAL.stmt = &ast.FunctionDef{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Name: ast.Identifier(yyDollar[2].str), Args: yyDollar[3].arguments, Body: yyDollar[6].stmts, Returns: yyDollar[4].expr}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:425
		{
			yyVAL.arguments = yyDollar[2].arguments
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:430
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:434
		{
			yyVAL.arguments = yyDollar[1].arguments
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:441
		{
			yyVAL.arg = yyDollar[1].arg
			yyVAL.expr = nil
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:446
		{
			yyVAL.arg = yyDollar[1].arg
			yyVAL.expr = yyDollar[3].expr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:453
		{
			yyVAL.args = nil
			yyVAL.args = append(yyVAL.args, yyDollar[1].arg)
			yyVAL.exprs = nil
			if yyDollar[1].expr != nil {
				yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
			}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:462
		{
			yyVAL.args = append(yyVAL.args, yyDollar[3].arg)
			if yyDollar[3].expr != nil {
				yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
			}
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:470
		{
			yyVAL.arg = nil
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:474
		{
			yyVAL.arg = yyDollar[1].arg
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:481
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos}
			yyVAL.arguments.Vararg = yyDollar[2].arg
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:486
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Vararg: yyDollar[2].arg, Kwonlyargs: yyDollar[4].args, KwDefaults: yyDollar[4].exprs}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line grammar.y:490
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Vararg: yyDollar[2].arg, Kwonlyargs: yyDollar[4].args, KwDefaults: yyDollar[4].exprs, Kwarg: yyDollar[7].arg}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:494
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Vararg: yyDollar[2].arg, Kwarg: yyDollar[5].arg}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:498
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Kwarg: yyDollar[2].arg}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:505
		{
			yyVAL.arguments = yyDollar[3].arguments
			yyVAL.arguments.Pos = yyVAL.pos
			yyVAL.arguments.Args = yyDollar[1].args
			yyVAL.arguments.Defaults = yyDollar[1].exprs
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:512
		{
			yyVAL.arguments = yyDollar[1].arguments
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:516
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Args: yyDollar[1].args, Defaults: yyDollar[1].exprs}
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:523
		{
			yyVAL.arguments = yyDollar[5].arguments
			yyVAL.arguments.Pos = yyVAL.pos
			yyVAL.arguments.PosOnlyArgs = yyDollar[1].args
			yyVAL.arguments.Defaults = append(yyDollar[1].exprs, yyVAL.arguments.Defaults...)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:530
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, PosOnlyArgs: yyDollar[1].args, Defaults: yyDollar[1].exprs}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:534
		{
			yyVAL.arguments = yyDollar[1].arguments
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:540
		{
			yyVAL.arg = &ast.Arg{Pos: yyVAL.pos, Arg: ast.Identifier(yyDollar[1].str)}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:544
		{
			yyVAL.arg = &ast.Arg{Pos: yyVAL.pos, Arg: ast.Identifier(yyDollar[1].str), Annotation: yyDollar[3].expr}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:550
		{
			yyVAL.arg = yyDollar[1].arg
			yyVAL.expr = nil
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:555
		{
			yyVAL.arg = yyDollar[1].arg
			yyVAL.expr = yyDollar[3].expr
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:562
		{
			yyVAL.args = nil
			yyVAL.args = append(yyVAL.args, yyDollar[1].arg)
			yyVAL.exprs = nil
			if yyDollar[1].expr != nil {
				yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
			}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:571
		{
			yyVAL.args = append(yyVAL.args, yyDollar[3].arg)
			if yyDollar[3].expr != nil {
				yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
			}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:579
		{
			yyVAL.arg = nil
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:583
		{
			yyVAL.arg = yyDollar[1].arg
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:590
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Kwonlyargs: yyDollar[4].args, KwDefaults: yyDollar[4].exprs}
			yyVAL.arguments.Vararg = yyDollar[2].arg
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
//line grammar.y:595
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Kwonlyargs: yyDollar[4].args, KwDefaults: yyDollar[4].exprs, Kwarg: yyDollar[7].arg}
			yyVAL.arguments.Vararg = yyDollar[2].arg
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:600
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Kwarg: yyDollar[5].arg}
			yyVAL.arguments.Vararg = yyDollar[2].arg
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:605
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Vararg: yyDollar[2].arg}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:609
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Kwarg: yyDollar[2].arg}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:617
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Args: yyDollar[1].args, Defaults: yyDollar[1].exprs}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:621
		{
			yyVAL.arguments = yyDollar[3].arguments
			yyVAL.arguments.Pos = yyVAL.pos
			yyVAL.arguments.Args = yyDollar[1].args
			yyVAL.arguments.Defaults = yyDollar[1].exprs
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:628
		{
			yyVAL.arguments = yyDollar[1].arguments
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:634
		{
			yyVAL.arguments = yyDollar[5].arguments
			yyVAL.arguments.Pos = yyVAL.pos
			yyVAL.arguments.PosOnlyArgs = yyDollar[1].args
			yyVAL.arguments.Defaults = append(yyDollar[1].exprs, yyVAL.arguments.Defaults...)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:641
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, PosOnlyArgs: yyDollar[1].args, Defaults: yyDollar[1].exprs}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:645
		{
			yyVAL.arguments = yyDollar[1].arguments
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:650
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:654
		{
			yyVAL.arguments = yyDollar[1].arguments
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:660
		{
			yyVAL.arg = &ast.Arg{Pos: yyVAL.pos, Arg: ast.Identifier(yyDollar[1].str)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:666
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:670
		{
			yyVAL.stmts = []ast.Stmt{yyDollar[1].stmt}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:678
		{
			yyVAL.stmts = nil
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[1].stmt)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:683
		{
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[3].stmt)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:689
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:695
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:699
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:703
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:707
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:711
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:715
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:719
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:723
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:734
		{
			target := yyDollar[1].expr
			setCtx(yylex, target, ast.Store)
			a := yyDollar[2].stmt.(*ast.AnnAssign)
			a.Pos = yyVAL.pos
			a.Target = target
			yyVAL.stmt = a
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:743
		{
			target := yyDollar[1].expr
			setCtx(yylex, target, ast.Store)
			yyVAL.stmt = &ast.AugAssign{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Target: target, Op: yyDollar[2].op, Value: yyDollar[3].expr}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:749
		{
			targets := []ast.Expr{yyDollar[1].expr}
			targets = append(targets, yyDollar[2].exprs...)
			value := targets[len(targets)-1]
			targets = targets[:len(targets)-1]
			setCtxs(yylex, targets, ast.Store)
			yyVAL.stmt = &ast.Assign{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Targets: targets, Value: value}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:758
		{
			yyVAL.stmt = &ast.ExprStmt{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Value: yyDollar[1].expr}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:764
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:768
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:774
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:778
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:784
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[2].expr)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:789
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:795
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:800
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:806
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:810
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:815
		{
			yyVAL.comma = false
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:819
		{
			yyVAL.comma = true
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:825
		{
			yyVAL.expr = tupleOrExpr(yyVAL.pos, yyDollar[1].exprs, yyDollar[2].comma)
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:832
		{
			yyVAL.stmt = &ast.AnnAssign{Annotation: yyDollar[2].expr, Value: yyDollar[4].expr}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:836
		{
			yyVAL.stmt = &ast.AnnAssign{Annotation: yyDollar[2].expr}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:842
		{
			yyVAL.op = ast.Add
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:846
		{
			yyVAL.op = ast.Sub
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:850
		{
			yyVAL.op = ast.Mult
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:854
		{
			yyVAL.op = ast.Div
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:858
		{
			yyVAL.op = ast.Modulo
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:862
		{
			yyVAL.op = ast.BitAnd
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:866
		{
			yyVAL.op = ast.BitOr
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:870
		{
			yyVAL.op = ast.BitXor
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:874
		{
			yyVAL.op = ast.LShift
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:878
		{
			yyVAL.op = ast.RShift
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:882
		{
			yyVAL.op = ast.Pow
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:886
		{
			yyVAL.op = ast.FloorDiv
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:890
		{
			yyVAL.op = ast.MatMult
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:897
		{
			setCtxs(yylex, yyDollar[2].exprs, ast.Del)
			yyVAL.stmt = &ast.Delete{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Targets: yyDollar[2].exprs}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:904
		{
			yyVAL.stmt = &ast.Pass{StmtBase: ast.StmtBase{Pos: yyVAL.pos}}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:910
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:914
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:918
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:922
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:926
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:932
		{
			yyVAL.stmt = &ast.Break{StmtBase: ast.StmtBase{Pos: yyVAL.pos}}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:938
		{
			yyVAL.stmt = &ast.Continue{StmtBase: ast.StmtBase{Pos: yyVAL.pos}}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:944
		{
			yyVAL.stmt = &ast.Return{StmtBase: ast.StmtBase{Pos: yyVAL.pos}}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:948
		{
			yyVAL.stmt = &ast.Return{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Value: yyDollar[2].expr}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:954
		{
			yyVAL.stmt = &ast.ExprStmt{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Value: yyDollar[1].expr}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:960
		{
			yyVAL.stmt = &ast.Raise{StmtBase: ast.StmtBase{Pos: yyVAL.pos}}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:964
		{
			yyVAL.stmt = &ast.Raise{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Exc: yyDollar[2].expr}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:968
		{
			yyVAL.stmt = &ast.Raise{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Exc: yyDollar[2].expr, Cause: yyDollar[4].expr}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:974
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:978
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:984
		{
			yyVAL.stmt = &ast.Import{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Names: yyDollar[2].aliases}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:991
		{
			yyVAL.level = 1
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:995
		{
			yyVAL.level = 3
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1001
		{
			yyVAL.level = yyDollar[1].level
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1005
		{
			yyVAL.level += yyDollar[2].level
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1011
		{
			yyVAL.level = 0
			yyVAL.str = yyDollar[1].str
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1016
		{
			yyVAL.level = yyDollar[1].level
			yyVAL.str = yyDollar[2].str
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1021
		{
			yyVAL.level = yyDollar[1].level
			yyVAL.str = ""
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1028
		{
			yyVAL.aliases = []*ast.Alias{{Pos: yyVAL.pos, Name: ast.Identifier("*")}}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1032
		{
			yyVAL.aliases = yyDollar[2].aliases
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1036
		{
			yyVAL.aliases = yyDollar[1].aliases
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1042
		{
			yyVAL.stmt = &ast.ImportFrom{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Module: ast.Identifier(yyDollar[2].str), Names: yyDollar[4].aliases, Level: yyDollar[2].level}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1048
		{
			yyVAL.alias = &ast.Alias{Pos: yyVAL.pos, Name: ast.Identifier(yyDollar[1].str)}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1052
		{
			yyVAL.alias = &ast.Alias{Pos: yyVAL.pos, Name: ast.Identifier(yyDollar[1].str), AsName: ast.Identifier(yyDollar[3].str)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1058
		{
			yyVAL.alias = &ast.Alias{Pos: yyVAL.pos, Name: ast.Identifier(yyDollar[1].str)}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1062
		{
			yyVAL.alias = &ast.Alias{Pos: yyVAL.pos, Name: ast.Identifier(yyDollar[1].str), AsName: ast.Identifier(yyDollar[3].str)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1068
		{
			yyVAL.aliases = nil
			yyVAL.aliases = append(yyVAL.aliases, yyDollar[1].alias)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1073
		{
			yyVAL.aliases = append(yyVAL.aliases, yyDollar[3].alias)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1079
		{
			yyVAL.aliases = nil
			yyVAL.aliases = append(yyVAL.aliases, yyDollar[1].alias)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1084
		{
			yyVAL.aliases = append(yyVAL.aliases, yyDollar[3].alias)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1090
		{
			yyVAL.str = yyDollar[1].str
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1094
		{
			yyVAL.str += "." + yyDollar[3].str
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1100
		{
			yyVAL.identifiers = nil
			yyVAL.identifiers = append(yyVAL.identifiers, ast.Identifier(yyDollar[1].str))
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1105
		{
			yyVAL.identifiers = append(yyVAL.identifiers, ast.Identifier(yyDollar[3].str))
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1111
		{
			yyVAL.stmt = &ast.Global{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Names: yyDollar[2].identifiers}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1117
		{
			yyVAL.stmt = &ast.Nonlocal{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Names: yyDollar[2].identifiers}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1123
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1128
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1134
		{
			yyVAL.stmt = &ast.Assert{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Test: yyDollar[2].expr}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1138
		{
			yyVAL.stmt = &ast.Assert{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Test: yyDollar[2].expr, Msg: yyDollar[4].expr}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1144
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1148
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1152
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1156
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1160
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1164
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1168
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1172
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1176
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1182
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1186
		{
			yyVAL.stmt = &ast.AsyncWith{With: *yyDollar[2].stmt.(*ast.With)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1190
		{
			yyVAL.stmt = &ast.AsyncFor{For: *yyDollar[2].stmt.(*ast.For)}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:1195
		{
			yyVAL.ifstmt = nil
			yyVAL.lastif = nil
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1200
		{
			elifs := yyVAL.ifstmt
			newif := &ast.If{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Test: yyDollar[3].expr, Body: yyDollar[5].stmts}
			if elifs == nil {
				yyVAL.ifstmt = newif
			} else {
				yyVAL.lastif.Orelse = []ast.Stmt{newif}
			}
			yyVAL.lastif = newif
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:1212
		{
			yyVAL.stmts = nil
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1216
		{
			yyVAL.stmts = yyDollar[3].stmts
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:1222
		{
			newif := &ast.If{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Test: yyDollar[2].expr, Body: yyDollar[4].stmts}
			yyVAL.stmt = newif
			elifs := yyDollar[5].ifstmt
			optional_else := yyDollar[6].stmts
			if len(optional_else) != 0 {
				if elifs != nil {
					yyDollar[5].lastif.Orelse = optional_else
					newif.Orelse = []ast.Stmt{elifs}
				} else {
					newif.Orelse = optional_else
				}
			} else {
				if elifs != nil {
					newif.Orelse = []ast.Stmt{elifs}
				}
			}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1243
		{
			yyVAL.stmt = &ast.While{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Test: yyDollar[2].expr, Body: yyDollar[4].stmts, Orelse: yyDollar[5].stmts}
		}
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:1249
		{
			target := tupleOrExpr(yyVAL.pos, yyDollar[2].exprs, false)
			setCtx(yylex, target, ast.Store)
			yyVAL.stmt = &ast.For{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Target: target, Iter: yyDollar[4].expr, Body: yyDollar[6].stmts, Orelse: yyDollar[7].stmts}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:1256
		{
			yyVAL.exchandlers = nil
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1260
		{
			exc := &ast.ExceptHandler{Pos: yyVAL.pos, ExprType: yyDollar[2].expr, Name: ast.Identifier(yyDollar[2].str), Body: yyDollar[4].stmts}
			yyVAL.exchandlers = append(yyVAL.exchandlers, exc)
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1267
		{
			yyVAL.stmt = &ast.Try{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Body: yyDollar[3].stmts, Handlers: yyDollar[4].exchandlers}
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:1271
		{
			yyVAL.stmt = &ast.Try{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Body: yyDollar[3].stmts, Handlers: yyDollar[4].exchandlers, Orelse: yyDollar[7].stmts}
		}
	case 187:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:1275
		{
			yyVAL.stmt = &ast.Try{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Body: yyDollar[3].stmts, Handlers: yyDollar[4].exchandlers, Finalbody: yyDollar[7].stmts}
		}
	case 188:
		yyDollar = yyS[yypt-10 : yypt+1]
//line grammar.y:1279
		{
			yyVAL.stmt = &ast.Try{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Body: yyDollar[3].stmts, Handlers: yyDollar[4].exchandlers, Orelse: yyDollar[7].stmts, Finalbody: yyDollar[10].stmts}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1285
		{
			yyVAL.withitems = nil
			yyVAL.withitems = append(yyVAL.withitems, yyDollar[1].withitem)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1290
		{
			yyVAL.withitems = append(yyVAL.withitems, yyDollar[3].withitem)
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1296
		{
			yyVAL.stmt = &ast.With{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Items: yyDollar[2].withitems, Body: yyDollar[4].stmts}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1302
		{
			yyVAL.withitem = &ast.WithItem{Pos: yyVAL.pos, ContextExpr: yyDollar[1].expr}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1306
		{
			v := yyDollar[3].expr
			setCtx(yylex, v, ast.Store)
			yyVAL.withitem = &ast.WithItem{Pos: yyVAL.pos, ContextExpr: yyDollar[1].expr, OptionalVars: v}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1315
		{
			yyVAL.expr = nil
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1320
		{
			yyVAL.expr = yyDollar[2].expr
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1325
		{
			yyVAL.expr = yyDollar[2].expr
			yyVAL.str = yyDollar[4].str
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1332
		{
			yyVAL.stmts = nil
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[1].stmts...)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1337
		{
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[2].stmts...)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1343
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1347
		{
			yyVAL.stmts = yyDollar[3].stmts
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1354
		{
			target := &ast.Name{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Id: ast.Identifier(yyDollar[1].str), Ctx: ast.Load}
			setCtx(yylex, target, ast.Store)
			yyVAL.expr = &ast.NamedExpr{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Target: target, Value: yyDollar[3].expr}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1360
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1366
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1370
		{
			yyVAL.expr = &ast.IfExp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Test: yyDollar[3].expr, Body: yyDollar[1].expr, Orelse: yyDollar[5].expr}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1374
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1380
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1384
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1390
		{
			yyVAL.expr = &ast.Lambda{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Args: yyDollar[2].arguments, Body: yyDollar[4].expr}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1396
		{
			yyVAL.expr = &ast.Lambda{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Args: yyDollar[2].arguments, Body: yyDollar[4].expr}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1402
		{
			yyVAL.expr = yyDollar[1].expr
			yyVAL.isExpr = true
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1407
		{
			if !yyDollar[1].isExpr {
				boolop := yyVAL.expr.(*ast.BoolOp)
				boolop.Values = append(boolop.Values, yyDollar[3].expr)
			} else {
				yyVAL.expr = &ast.BoolOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.Or, Values: []ast.Expr{yyVAL.expr, yyDollar[3].expr}}
			}
			yyVAL.isExpr = false
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1419
		{
			yyVAL.expr = yyDollar[1].expr
			yyVAL.isExpr = true
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1424
		{
			if !yyDollar[1].isExpr {
				boolop := yyVAL.expr.(*ast.BoolOp)
				boolop.Values = append(boolop.Values, yyDollar[3].expr)
			} else {
				yyVAL.expr = &ast.BoolOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.And, Values: []ast.Expr{yyVAL.expr, yyDollar[3].expr}}
			}
			yyVAL.isExpr = false
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1436
		{
			yyVAL.expr = &ast.UnaryOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.Not, Operand: yyDollar[2].expr}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1440
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1446
		{
			yyVAL.expr = yyDollar[1].expr
			yyVAL.isExpr = true
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1451
		{
			if !yyDollar[1].isExpr {
				comp := yyVAL.expr.(*ast.Compare)
				comp.Ops = append(comp.Ops, yyDollar[2].cmpop)
				comp.Comparators = append(comp.Comparators, yyDollar[3].expr)
			} else {
				yyVAL.expr = &ast.Compare{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyVAL.expr, Ops: []ast.CmpOp{yyDollar[2].cmpop}, Comparators: []ast.Expr{yyDollar[3].expr}}
			}
			yyVAL.isExpr = false
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1466
		{
			yyVAL.cmpop = ast.Lt
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1470
		{
			yyVAL.cmpop = ast.Gt
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1474
		{
			yyVAL.cmpop = ast.Eq
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1478
		{
			yyVAL.cmpop = ast.GtE
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1482
		{
			yyVAL.cmpop = ast.LtE
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1486
		{
			yylex.(*yyLex).SyntaxError("invalid syntax")
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1490
		{
			yyVAL.cmpop = ast.NotEq
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1494
		{
			yyVAL.cmpop = ast.In
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1498
		{
			yyVAL.cmpop = ast.NotIn
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1502
		{
			yyVAL.cmpop = ast.Is
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1506
		{
			yyVAL.cmpop = ast.IsNot
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1512
		{
			yyVAL.expr = &ast.Starred{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: yyDollar[2].expr, Ctx: ast.Load}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1518
		{
			yyVAL.expr = &ast.StarStarred{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: yyDollar[2].expr, Ctx: ast.Load}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1524
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1528
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.BitOr, Right: yyDollar[3].expr}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1534
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1538
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.BitXor, Right: yyDollar[3].expr}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1544
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1548
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.BitAnd, Right: yyDollar[3].expr}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1554
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1558
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.LShift, Right: yyDollar[3].expr}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1562
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.RShift, Right: yyDollar[3].expr}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1568
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1572
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Add, Right: yyDollar[3].expr}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1576
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Sub, Right: yyDollar[3].expr}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1582
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1586
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Mult, Right: yyDollar[3].expr}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1590
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.MatMult, Right: yyDollar[3].expr}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1594
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Div, Right: yyDollar[3].expr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1598
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Modulo, Right: yyDollar[3].expr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1602
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.FloorDiv, Right: yyDollar[3].expr}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1608
		{
			yyVAL.expr = &ast.UnaryOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.UAdd, Operand: yyDollar[2].expr}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1612
		{
			yyVAL.expr = &ast.UnaryOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.USub, Operand: yyDollar[2].expr}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1616
		{
			yyVAL.expr = &ast.UnaryOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.Invert, Operand: yyDollar[2].expr}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1620
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1626
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1630
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Pow, Right: yyDollar[3].expr}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1636
		{
			yyVAL.expr = applyTrailers(yyDollar[1].expr, yyDollar[2].exprs)
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1640
		{
			yyVAL.expr = &ast.Await{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: applyTrailers(yyDollar[2].expr, yyDollar[3].exprs)}
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:1646
		{
			yyVAL.exprs = nil
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1650
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[2].expr)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1656
		{
			yyVAL.obj = yyDollar[1].obj
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1660
		{
			switch a := yyVAL.obj.(type) {
			case py.String:
				switch b := yyDollar[2].obj.(type) {
				case py.String:
					yyVAL.obj = a + b
				default:
					yylex.(*yyLex).SyntaxError("cannot mix string and nonstring literals")
				}
			case py.Bytes:
				switch b := yyDollar[2].obj.(type) {
				case py.Bytes:
					yyVAL.obj = append(a, b...)
				default:
					yylex.(*yyLex).SyntaxError("cannot mix bytes and nonbytes literals")
				}
			}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1681
		{
			yyVAL.expr = &ast.Tuple{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Ctx: ast.Load}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1685
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1689
		{
			yyVAL.expr = &ast.GeneratorExp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elt: yyDollar[2].expr, Generators: yyDollar[3].comprehensions}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1693
		{
			yyVAL.expr = tupleOrExpr(yyVAL.pos, yyDollar[2].exprs, yyDollar[3].comma)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1697
		{
			yyVAL.expr = &ast.List{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Ctx: ast.Load}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1701
		{
			yyVAL.expr = &ast.ListComp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elt: yyDollar[2].expr, Generators: yyDollar[3].comprehensions}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1705
		{
			yyVAL.expr = &ast.List{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elts: yyDollar[2].exprs, Ctx: ast.Load}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1709
		{
			yyVAL.expr = &ast.Dict{ExprBase: ast.ExprBase{Pos: yyVAL.pos}}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1713
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1717
		{
			yyVAL.expr = &ast.Name{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Id: ast.Identifier(yyDollar[1].str), Ctx: ast.Load}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1721
		{
			yyVAL.expr = &ast.Constant{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: yyDollar[1].obj}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1725
		{
			switch s := yyDollar[1].obj.(type) {
			case py.String:
				yyVAL.expr = &ast.Constant{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: s}
			case py.Bytes:
				yyVAL.expr = &ast.Constant{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: s}
			default:
				panic("not Bytes or String in strings")
			}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1736
		{
			yyVAL.expr = &ast.Constant{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: &ast.Ellipsis{ExprBase: ast.ExprBase{Pos: yyVAL.pos}}}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1740
		{
			yyVAL.expr = &ast.Constant{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: py.None}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1744
		{
			yyVAL.expr = &ast.Constant{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: py.True}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1748
		{
			yyVAL.expr = &ast.Constant{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: py.False}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1754
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1758
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1764
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1769
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1776
		{
			yyVAL.expr = yyDollar[2].call
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1780
		{
			slice := yyDollar[2].slice
			// If all items of a ExtSlice are just Index then return as tuple
			if extslice, ok := slice.(*ast.ExtSlice); ok {
				elts := make([]ast.Expr, len(extslice.Dims))
				for i, item := range extslice.Dims {
					if index, isIndex := item.(*ast.Index); isIndex {
						elts[i] = index.Value
					} else {
						goto notAllIndex
					}
				}
				slice = &ast.Index{SliceBase: extslice.SliceBase, Value: &ast.Tuple{ExprBase: ast.ExprBase{Pos: extslice.SliceBase.Pos}, Elts: elts, Ctx: ast.Load}}
			notAllIndex:
			}
			yyVAL.expr = &ast.Subscript{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Slice: slice, Ctx: ast.Load}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1798
		{
			yyVAL.expr = &ast.Attribute{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Attr: ast.Identifier(yyDollar[2].str), Ctx: ast.Load}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1804
		{
			yyVAL.slice = yyDollar[1].slice
			yyVAL.isExpr = true
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1809
		{
			if !yyDollar[1].isExpr {
				extSlice := yyVAL.slice.(*ast.ExtSlice)
				extSlice.Dims = append(extSlice.Dims, yyDollar[3].slice)
			} else {
				yyVAL.slice = &ast.ExtSlice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Dims: []ast.Slicer{yyDollar[1].slice, yyDollar[3].slice}}
			}
			yyVAL.isExpr = false
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1821
		{
			if yyDollar[2].comma && yyDollar[1].isExpr {
				yyVAL.slice = &ast.ExtSlice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Dims: []ast.Slicer{yyDollar[1].slice}}
			} else {
				yyVAL.slice = yyDollar[1].slice
			}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1831
		{
			yyVAL.slice = &ast.Index{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Value: yyDollar[1].expr}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1835
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: nil, Upper: nil, Step: nil}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1839
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: nil, Upper: nil, Step: yyDollar[2].expr}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1843
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: nil, Upper: yyDollar[2].expr, Step: nil}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1847
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: nil, Upper: yyDollar[2].expr, Step: yyDollar[3].expr}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1851
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: yyDollar[1].expr, Upper: nil, Step: nil}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1855
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: yyDollar[1].expr, Upper: nil, Step: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1859
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: yyDollar[1].expr, Upper: yyDollar[3].expr, Step: nil}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1863
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: yyDollar[1].expr, Upper: yyDollar[3].expr, Step: yyDollar[4].expr}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1869
		{
			yyVAL.expr = nil
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1873
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1879
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1883
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1889
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1894
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1900
		{
			yyVAL.exprs = yyDollar[1].exprs
			yyVAL.comma = yyDollar[2].comma
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1907
		{
			elts := yyDollar[1].exprs
			if yyDollar[2].comma || len(elts) > 1 {
				yyVAL.expr = &ast.Tuple{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elts: elts, Ctx: ast.Load}
			} else {
				yyVAL.expr = elts[0]
			}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1919
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr, yyDollar[3].expr) // key, value order
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1924
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, nil, yyDollar[1].expr) // key, value order
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1929
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1933
		{
			yyVAL.exprs = append(yyVAL.exprs, nil, yyDollar[3].expr)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1943
		{
			keyValues := yyDollar[1].exprs
			d := &ast.Dict{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Keys: nil, Values: nil}
			for i := 0; i < len(keyValues)-1; i += 2 {
				d.Keys = append(d.Keys, keyValues[i])
				d.Values = append(d.Values, keyValues[i+1])
			}
			yyVAL.expr = d
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1953
		{
			yyVAL.expr = &ast.DictComp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Key: yyDollar[1].expr, Value: yyDollar[3].expr, Generators: yyDollar[4].comprehensions}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1957
		{
			yyVAL.expr = &ast.DictComp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: yyDollar[1].expr, Generators: yyDollar[2].comprehensions}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1961
		{
			yyVAL.expr = &ast.Set{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elts: yyDollar[1].exprs}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1965
		{
			yyVAL.expr = &ast.SetComp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elt: yyDollar[1].expr, Generators: yyDollar[2].comprehensions}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1971
		{
			classDef := &ast.ClassDef{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Name: ast.Identifier(yyDollar[2].str), Body: yyDollar[5].stmts}
			yyVAL.stmt = classDef
			args := yyDollar[3].call
			if args != nil {
				classDef.Bases = args.Args
				classDef.Keywords = args.Keywords
			}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1983
		{
			yyVAL.call = yyDollar[1].call
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1987
		{
			yyVAL.call = yyDollar[1].call
			if len(yyVAL.call.Keywords) > 0 {
				for _, arg := range yyDollar[3].call.Args {
					// There will only be zero or one elements here.
					if _, ok := arg.(*ast.Starred); ok {
						for _, kw := range yyVAL.call.Keywords {
							if kw.Arg == "" {
								yylex.(*yyLex).SyntaxError(
									"iterable argument unpacking follows keyword argument unpacking")
								break
							}
						}
					} else {
						kwargs := false
						for _, kw := range yyVAL.call.Keywords {
							if kw.Arg == "" {
								yylex.(*yyLex).SyntaxError(
									"positional argument follows keyword argument unpacking")
								kwargs = true
								break
							}
						}
						if !kwargs {
							yylex.(*yyLex).SyntaxError(
								"positional argument follows keyword argument")
						}
					}
				}
			}
			yyVAL.call.Args = append(yyVAL.call.Args, yyDollar[3].call.Args...)
			yyVAL.call.Keywords = append(yyVAL.call.Keywords, yyDollar[3].call.Keywords...)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:2031
		{
			yyVAL.call = &ast.Call{}
			yyVAL.call.Args = []ast.Expr{yyDollar[1].expr}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:2036
		{
			yyVAL.call = &ast.Call{}
			yyVAL.call.Args = []ast.Expr{
				&ast.GeneratorExp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elt: yyDollar[1].expr, Generators: yyDollar[2].comprehensions},
			}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:2043
		{
			target := yyDollar[1].expr
			setCtx(yylex, target, ast.Store)
			yyVAL.call = &ast.Call{}
			yyVAL.call.Args = []ast.Expr{&ast.NamedExpr{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Target: target, Value: yyDollar[3].expr}}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:2050
		{
			yyVAL.call = &ast.Call{}
			test := yyDollar[1].expr
			if name, ok := test.(*ast.Name); ok {
				yyVAL.call.Keywords = []*ast.Keyword{{Pos: name.Pos, Arg: name.Id, Value: yyDollar[3].expr}}
			} else {
				yylex.(*yyLex).SyntaxError("keyword can't be an expression")
			}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:2060
		{
			yyVAL.call = &ast.Call{}
			yyVAL.call.Keywords = []*ast.Keyword{
				{
					Pos:   yyVAL.pos,
					Value: yyDollar[2].expr,
				},
			}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:2072
		{
			yyVAL.comprehensions = yyDollar[1].comprehensions
			yyVAL.exprs = nil
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:2077
		{
			yyVAL.comprehensions = yyDollar[1].comprehensions
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:2084
		{
			c := ast.Comprehension{
				Target: tupleOrExpr(yyVAL.pos, yyDollar[2].exprs, yyDollar[2].comma),
				Iter:   yyDollar[4].expr,
			}
			setCtx(yylex, c.Target, ast.Store)
			yyVAL.comprehensions = []ast.Comprehension{c}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:2093
		{
			c := ast.Comprehension{
				Target: tupleOrExpr(yyVAL.pos, yyDollar[2].exprs, yyDollar[2].comma),
				Iter:   yyDollar[4].expr,
				Ifs:    yyDollar[5].exprs,
			}
			setCtx(yylex, c.Target, ast.Store)
			yyVAL.comprehensions = []ast.Comprehension{c}
			yyVAL.comprehensions = append(yyVAL.comprehensions, yyDollar[5].comprehensions...)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:2104
		{
			yyVAL.comprehensions = yyDollar[2].comprehensions
			yyVAL.comprehensions[0].Is_Async = 1
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:2111
		{
			yyVAL.exprs = []ast.Expr{yyDollar[2].expr}
			yyVAL.comprehensions = nil
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:2116
		{
			yyVAL.exprs = []ast.Expr{yyDollar[2].expr}
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].exprs...)
			yyVAL.comprehensions = yyDollar[3].comprehensions
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:2127
		{
			yyVAL.expr = &ast.Yield{ExprBase: ast.ExprBase{Pos: yyVAL.pos}}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:2131
		{
			yyVAL.expr = &ast.YieldFrom{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:2135
		{
			yyVAL.expr = &ast.Yield{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: yyDollar[2].expr}
		}
	}
	goto yystack /* stack new state and value */
}
